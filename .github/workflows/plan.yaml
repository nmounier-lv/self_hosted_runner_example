name: TF_PLAN

# on:
#   workflow_run:
#     workflows:
#       - TF_TESTS # Change this to the name of your development or default branch. You can add more that a branch
#     types:
#       - completed

on:
  workflow_call:
    inputs:
      config-path:
        description: Relative path to the folder containing the tfvars file and backend config file
        required: true
        type: string
      gh-env:
        description: GH environment, used to enforce protection rules (e.g obligatory review of the plan before apply)
        required: true
        type: string
        default: myenv

# on:
#   push:
#     branches:
#       - master # Change this to the name of your development or default branch. You can add more that a branch

env:
  TGENV_AUTO_INSTALL: true
  TFENV_AUTO_INSTALL: true
  # TF_GH_USER: ${{ secrets.TF_GH_USER }}
  # TF_GH_PAT: ${{ secrets.TF_GH_PAT }}

jobs:
  TF_PLAN:
    name: TF_PLAN | GENERATE TFPLAN FILE, VALIDATE & SAVE
    # Run on Self-Runner developed and hosted by LV_NEO
    runs-on: self-hosted

    # this is needed since we are running terraform with read-only permissions
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:

      # Checkout
      - name: Checkout the repository from remote to local
        uses: actions/checkout@v4

      - name: tf init
        run: terraform init -reconfigure -backend-config=${{ inputs.config-path }}/config.gcs.tfbackend
      
      - name: 'Test: check wd content'
        run: ls -la

      # TODO Log in GCP once from the pod in the GKE cluster
      # - name: Log in to GCP
      #   uses:
      #   with:
      #     creds: '${{ secrets.TF_AZ_CREDS_PRJ }}'

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan --var-file=./${{ inputs.config-path }}/terraform.tfvars -detailed-exitcode -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          echo "Exit code: $exitcode"

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      # Save plan to artifacts
      - name: Upload Terraform Plan file (tfplan) to gh artifacts store
        uses: actions/upload-artifact@v3/node20
        with:
          name: tfplan
          path: tfplan


  TF_APPLY:
    name: 'TF_APPLY | APPLY SAVED TFPLAN'
    needs: TF_PLAN
    environment: ${{ inputs.gh-env }} # Protection rules on the environment are applied to the job (like requesting a review before launching the job)
    runs-on: self-hosted

    steps:

      # Checkout
      - name: Checkout the repository from remote to local
        uses: actions/checkout@v4

      - name: tf init
        run: terraform init -reconfigure -backend-config=${{ inputs.config-path }}/config.gcs.tfbackend

      - name: 'Test: check wd content'
        run: ls -la

      - uses: actions/download-artifact@v3/node20
        with:
          name: tfplan
      
      - name: 'Test: check file presence after download'
        run: ls -la

      - name: 'Test: read tfplan exit code'
        env:
          OUTPUT1: ${{needs.TF_PLAN.outputs.tfplanExitCode}}
        run: echo "$OUTPUT1"

      - name: 'Test: run apply with the downloaded tfplan'
        run: terraform apply -auto-approve tfplan

      # TODO: log in GCP
      # - name: Log in GCP
      #   uses:
      #   with:
      #     creds: '${{ secrets.TF_AZ_CREDS_PRJ }}'


      # - name: terraform apply -auto-approve
      #   run: terraform apply --var-file=./poc/terraform.tfvars